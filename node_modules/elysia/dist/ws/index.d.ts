/// <reference types="bun-types" />
import type { ServerWebSocket, ServerWebSocketSendStatus, WebSocketHandler } from 'bun';
import type { Elysia, SCHEMA } from '..';
import type { ElysiaWSContext } from './types';
export declare class ElysiaWS<WS extends ElysiaWSContext> {
    raw: WS;
    data: WS['data'];
    isSubscribed: WS['isSubscribed'];
    constructor(ws: WS);
    publish(topic: string, data?: WS['data'][typeof SCHEMA]['response'], compress?: boolean): this;
    publishToSelf(topic: string, data?: WS['data'][typeof SCHEMA]['response'], compress?: boolean): this;
    send(data: WS['data'][typeof SCHEMA]['response']): this;
    subscribe(room: string): this;
    unsubscribe(room: string): this;
    cork(callback: (ws: ServerWebSocket<any>) => any): this;
    close(): this;
}
export declare const ws: (config?: Omit<WebSocketHandler, 'open' | 'message' | 'close' | 'drain'>) => (app: Elysia) => Elysia<{
    store: {};
    request: {
        publish: WSPublish;
    };
    schema: {};
    meta: Record<typeof SCHEMA, {}> & Record<typeof import("..").DEFS, {}> & Record<typeof import("..").EXPOSED, {}>;
}>;
type WSPublish = (topic: string, data: string | ArrayBufferView | ArrayBuffer | SharedArrayBuffer, compress?: boolean) => ServerWebSocketSendStatus;
export type { WSTypedSchema, WebSocketHeaderHandler, WebSocketSchemaToRoute, ElysiaWSContext, ElysiaWSOptions, TransformMessageHandler } from './types';
