"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationError = exports.ParseError = exports.NotFoundError = exports.InternalServerError = void 0;
class InternalServerError extends Error {
    constructor() {
        super('INTERNAL_SERVER_ERROR');
        this.code = 'NOT_FOUND';
        this.status = 500;
    }
}
exports.InternalServerError = InternalServerError;
class NotFoundError extends Error {
    constructor() {
        super('NOT_FOUND');
        this.code = 'NOT_FOUND';
        this.status = 404;
    }
}
exports.NotFoundError = NotFoundError;
class ParseError extends Error {
    constructor() {
        super('PARSE');
        this.code = 'PARSE';
        this.status = 400;
    }
}
exports.ParseError = ParseError;
class ValidationError extends Error {
    constructor(type, validator, value) {
        const error = validator.Errors(value).First();
        super(`Invalid ${type}: '${error?.path?.slice(1) || 'root'}'. ${error?.message}`);
        this.validator = validator;
        this.value = value;
        this.code = 'VALIDATION';
        this.status = 400;
    }
    get all() {
        return [...this.validator.Errors(this.value)];
    }
    toResponse(headers) {
        return new Response(this.message, {
            status: 400,
            headers
        });
    }
}
exports.ValidationError = ValidationError;
