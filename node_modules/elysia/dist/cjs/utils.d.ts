import { TSchema } from '@sinclair/typebox';
import { TypeCheck } from '@sinclair/typebox/compiler';
import type { DeepMergeTwoTypes, LifeCycleStore, LocalHook, TypedSchema, RegisteredHook } from './types';
export declare const SCHEMA: unique symbol;
export declare const DEFS: unique symbol;
export declare const EXPOSED: unique symbol;
export declare const mergeObjectArray: <T>(a: T | T[], b: T | T[]) => T[];
export declare const mergeHook: (a: LocalHook<any, any> | LifeCycleStore<any>, b: LocalHook<any, any>) => RegisteredHook<any>;
export declare const mergeDeep: <A extends Object = Object, B extends Object = Object>(target: A, source: B) => DeepMergeTwoTypes<A, B>;
export declare const getSchemaValidator: (s: TSchema | string | undefined, models: Record<string, TSchema>, additionalProperties?: boolean) => TypeCheck<TSchema> | undefined;
export declare const getResponseSchemaValidator: (s: TypedSchema['response'] | undefined, models: Record<string, TSchema>, additionalProperties?: boolean) => Record<number, TypeCheck<any>> | undefined;
